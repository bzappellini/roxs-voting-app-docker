services:
  # Redis - Cola de mensajes para votos
  redis:
    image: redis:7-alpine
    container_name: roxs-redis
    ports:
      - "6379:6379"
    networks:
      - voting-network
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 10s
    restart: unless-stopped

  # PostgreSQL - Base de datos para almacenar votos
  database:
    image: postgres:15-alpine
    container_name: roxs-database
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: votes
    ports:
      - "5432:5432"
    networks:
      - voting-network
    volumes:
      - db-data:/var/lib/postgresql/data
      - ./init-db:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s
    restart: unless-stopped

  # Vote App - Frontend de votación (Flask/Python)
  vote:
    build:
      context: ./roxs-voting-app/vote
      dockerfile: Dockerfile
    container_name: roxs-vote
    ports:
      - "5000:80"
    environment:
      REDIS_HOST: redis
      DATABASE_HOST: database
      DATABASE_USER: postgres
      DATABASE_PASSWORD: postgres
      DATABASE_NAME: votes
      OPTION_A: "Cats"
      OPTION_B: "Dogs"
    networks:
      - voting-network
    depends_on:
      redis:
        condition: service_healthy
      database:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/healthz"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 30s
    restart: unless-stopped

  # Worker - Procesador de votos (Node.js)
  worker:
    build:
      context: ./roxs-voting-app/worker
      dockerfile: Dockerfile
    container_name: roxs-worker
    ports:
      - "3001:3000"
    environment:
      REDIS_HOST: redis
      DATABASE_HOST: database
      DATABASE_USER: postgres
      DATABASE_PASSWORD: postgres
      DATABASE_NAME: votes
    networks:
      - voting-network
    depends_on:
      redis:
        condition: service_healthy
      database:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/healthz"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 30s
    restart: unless-stopped

  # Result App - Visualización de resultados (Node.js)
  result:
    build:
      context: ./roxs-voting-app/result
      dockerfile: Dockerfile
    container_name: roxs-result
    ports:
      - "5001:3000"
    environment:
      DATABASE_HOST: database
      DATABASE_USER: postgres
      DATABASE_PASSWORD: postgres
      DATABASE_NAME: votes
      APP_PORT: 3000
    networks:
      - voting-network
    depends_on:
      database:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/healthz"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 30s
    restart: unless-stopped

networks:
  voting-network:
    driver: bridge
    name: roxs-voting-network

volumes:
  redis-data:
    name: roxs-redis-data
  db-data:
    name: roxs-db-data
